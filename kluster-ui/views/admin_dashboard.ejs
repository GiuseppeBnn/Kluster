<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link href="/styles.css" rel="stylesheet" type="text/css" />
  </head>

  <body class="bg-content text-secondary">
    <%- include('components/layout/header', {isAdmin: true}) %>
    <div
      class="rounded-md shadow-md px-4 md:px-4 py-4 m-4 md:mx-52 md:flex md:justify-between md:items-center"
    >
      <div class="flex gap-6 items-center">
        <p>Generate deliver token</p>
        <p class="text-primary text-sm italic" id="p-error"></p>
      </div>
      <!-- campo dove viene piazzata la stringa generata in modo che viene facile compiarla e apposito bottone per copiarla-->
      <div class="flex items-center justify-center">
        <button
          class="text-secondary px-2 rounded-md shadow-lg hover:text-secondary-focus hover:shadow-md mr-2 md:mr-4"
          id="generate-token"
        >
          Generate
        </button>
        <input
          type="text"
          class="border border-secondary rounded-md max-w-xs"
          id="token"
          readonly
        />
        <button
          class="text-secondary px-2 rounded-md shadow-lg hover:text-secondary-focus hover:shadow-md"
          id="copy-token"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            style="fill: rgba(0, 0, 0, 1)"
            id="copy-token"
          >
            <path
              d="M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z"
            ></path>
            <path d="M6 12h6v2H6zm0 4h6v2H6z"></path>
          </svg>
        </button>
      </div>
    </div>
    <div class="w-full flex flex-col min-h-screen p-8" id="dp-container"></div>
    <script>
      const parser = new DOMParser();
      reloadCharts();
      setInterval(reloadCharts, 8000);
      ////////////////////////////
      function reloadCharts() {
        const dp_container = document.getElementById("dp-container");
        //create a new div element that contains
        fetch("/charts-status")
          .then(async (response) => {
            if (response.status == 202) {
              dp_container.innerHTML = await response.text();
              activeButtons(dp_container);
              return;
            }
            console.log("error");
            return (dp_container.innerHTML = `<p class="text-primary text-sm italic mt-2" id="p-error">General error</p>`);
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }
      function reloadChart(chartJwt) {
        const container = document.getElementById(
          `chart-container-${chartJwt}`
        );
        fetch(`/chart-status/${chartJwt}`)
          .then((response) => {
            if (response.status != 202) {
              const p_error = container.querySelector(`#p_error-${chartJwt}`);
              p_error.innerHTML = "Chart not responding";
              return;
            }
            return response.text();
          })
          .then((data) => {
            //convertire data in HTMLelement ed estrarre il contenuto
            const doc = convertDataToHtml(data);
            const chart = doc.getElementById(`chart-container-${chartJwt}`);
            container.innerHTML = chart.innerHTML;
          })
          .then(() => {
            activeButtons(container);
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }
      function convertDataToHtml(data) {
        return parser.parseFromString(data, "text/html");
      }
      function activeButtons(container) {
        activePlayButtons(container);
        activeStopButtons(container);
        activeDeleteButtons(container);
      }
      function splitId(id) {
        let splitIndex = id.indexOf("-");
        return id.substring(splitIndex + 1);
      }

      function activePlayButtons(container) {
        const playButtons = container.querySelectorAll("[id^='play-']");
        playButtons.forEach((button) => {
          button.addEventListener("click", (event) => {
            let chart = splitId(event.target.id);
            console.log(chart);
            fetch(`/play/${chart}`, { method: "PATCH" })
              .then((response) => response.text())
              .then(() => reloadChart(chart))
              .catch((error) => {
                console.error("Error:", error);
              });
          });
        });
      }
      function activeStopButtons(container) {
        const stopButtons = container.querySelectorAll("[id^='stop-']");
        stopButtons.forEach((button) => {
          button.addEventListener("click", (event) => {
            const chart = event.target.id.split("-")[1];
            fetch(`/stop/${chart}`, { method: "PATCH" })
              .then((response) => response.text())
              .then(() => reloadChart(chart))
              .catch((error) => {
                console.error("Error:", error);
              });
          });
        });
      }
      function activeDeleteButtons(container) {
        const deleteButtons = container.querySelectorAll("[id^='delete-']");
        deleteButtons.forEach((button) => {
          button.addEventListener("click", (event) => {
            const chart = event.target.id.split("-")[1];
            fetch(`/undeliver/${chart}`, { method: "DELETE" })
              .then((response) => response.text())
              .then(() => reloadChart(chart))
              .catch((error) => {
                console.error("Error:", error);
              });
          });
        });
      }

      const generateToken = document.getElementById("generate-token");
      const token = document.getElementById("token");
      const copyToken = document.querySelector("#copy-token");
      const p_error = document.querySelector("#p-error");
      generateToken.addEventListener("click", () => {
        fetch("/admin/generate-deliver-token")
          .then((response) => {
            if (response.status != 202) {
              p_error.innerHTML = "Error generating token";
              return;
            }
            return response.text();
          })
          .then((data) => {
            token.value = data;
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      });
      copyToken.addEventListener("click", () => {
        token.select();
        document.execCommand("copy");
        p_error.innerHTML = "Copied!";
        setTimeout(() => {
          p_error.innerHTML = "";
        }, 2000);
      });
    </script>
  </body>
</html>
